	.title	http11
	.ident	/X00.50/
	.mcall	crrg$s,craw$s,sref$s,qiow$s,qio$s
	.mcall	astx$s,dsar$s,enar$s,srda$s,rcvd$s
	.mcall	spnd$s,alun$s,map$s,mrkt$s,gtim$s
	.mcall	rdbbk$,wdbbk$
	.mcall	ordie,die,dielun
	.mcall	ctxini,ctxuse,ctx2st
	.mcall	save02,save05

	.include /offset.mac/

	.nlist	me

port	=	1337.

tilun	=	1
tclun	=	2
tcefn	=	1
tiefn	=	2
conefn	=	2

clinum	=	20
quesiz	=	20
blun	=	4

sopt	=	21
tmout	=	30.

maxage	=	5
wtchps	=	5

	.sbttl	Error Handling Macros

	.macro	deferr	code,desc
	.save
	.psect	errors,d,ro
hdr'code:
	.ascii	|HTTP/1.1 code desc|<15><12>
	.ascii	|Content-Length: |
hdl'code=	. - hdr'code
msg'code:
	.ascii	|code: desc|
msl'code=	. - msg'code

	.psect	errcod,i,ro
rsp'code::
	mov	r1,r4
	add	#cl.sta,r4
	qio$s	#io.wlb,cl.lun(r1),#conefn,,r4,#rspast,<#hdr'code,#hdl'code>
	orclos
	mov	r1,r3
	mov	#tmpbuf,r0
	mov	#msl'code,r1
	clr	r2
	call	$cbdmg
	sub	#tmpbuf,r0
	mov	r3,r1
	qio$s	#io.wlb,cl.lun(r1),#conefn,,r4,#rspast,<#tmpbuf,r0>
	orclos
	qio$s	#io.wlb,cl.lun(r1),#conefn,,r4,#rspast,<#hdrend,#hdlend>
	orclos
	qio$s	#io.wlb,cl.lun(r1),#conefn,,r4,#rspdon,<#msg'code,#msl'code>
	orclos
	astx$s
	.restore

	.macro	or'code	cli,iosb,?ok
	bcc	ok
	.if nb iosb
	tstb	iosb
	bpl	ok
	.endc
	.if nb cli
	mov	cli,r1
	.endc
	jmp	rsp'code
ok:
	.endm	or'code
	.endm	deferr	

	.macro	orclos	cli,iosb,?ok
	bcc	ok
	.if nb iosb
	tstb	iosb
	bpl	ok
	.endc
	.if nb cli
	mov	cli,r1
	.endc
	jmp	close
ok:
	.endm

	deferr	400,<Bad Request>
	deferr	404,<Not Found>
	deferr	500,<Internal Server Error>
	deferr	503,<Service Unavailable>

	.sbttl	Data Definition

	.psect	dir,d,rw
regsiz	=	200
rdb::	rdbbk$	regsiz,,,rs.att!rs.red!rs.wrt,170000
rdbsiz	=	. - rdb
wdb::	wdbbk$	7,regsiz,0,0,,ws.wrt,reqid

	.psect	regdef,d,rw
clirdb::.blkb	rdbsiz * clinum

	.psect	clidef,d,rw
reqid::	.word	0
topcli::.word	0
client::.blkb	cl.siz * clinum

	.psect	tmp,d,rw
rspbuf:	.blkw	15.
tmpbuf:	.blkw	100
tmpbl	=	. - tmpbuf
reqbuf:	.blkw	100
reqbl	=	. - reqbuf
iosb:	.blkw	2
date:	.blkw	8.
timer:	.blkw	1

	.psect	handlr,d,rw
rcvtsk:	.rad50	/HWROUT/
hndtbl:	.word	0
	.rad50	/ABOUT/
	.word	^rABO
	.rad50	/ABOUT/
	.word	^rDIC
	.rad50	/DICERT/
	.word	^rQAR
	.rad50	/QARG/
	.word	^rHEL
	.rad50	/HWROUT/
	.word	^rBYE
hndend:	.rad50	/BYROUT/

	.psect	const,d,ro
reqget:	.asciz	|GET|
hdr200:	.ascii	|HTTP/1.1 200 OK|<15><12>
	.ascii	|Content-Type: text/html; charset=utf-8|<15><12>
	.ascii	|Content-Length: |
hdl200	=	. - hdr200
hdrend:	.ascii	<15><12>|Server: HTTP/11 X00.50|<15><12>
	.ascii	|Connection: close|<15><12>
	.ascii	<15><12>
hdlend	=	. - hdrend

	.sbttl	Initialization

	.psect	code,i,ro
start::	alun$s	#tilun,#"TI
	dielun	#tilun
	call	inicli
	crrg$s	#rdb
	ordie	<Cannot create region>
	craw$s	#wdb
	ordie	<Cannot create window>
	srda$s	#rsprdy
	ordie	<Cannot set receive AST>

	alun$s	#tclun,#"TC
	ordie	<Cannot assign listening LUN>

	gtim$s	#date
	ordie	<Cannot get time information>
	mov	date+g.ticp,r0
	mov	#wtchps,r1
	call	$div
	mov	r0,timer

	dsar$s

	qiow$s	#io.cep,#tclun,#tcefn,,#iosb,,<#port>
	ordie	<Cannot create endpoint>,iosb
	qiow$s	#io.ras,#tclun,#tcefn,,#iosb,,<#conrdy>
	ordie	<Cannot regiser AST>,iosb
	qiow$s	#io.lsn,#tclun,#tcefn,,#iosb,,<,#clinum.>
	ordie	<Cannot listen>,iosb

	mrkt$s	,timer,#1,#watchd
	ordie	<Cannot setup watchdog timer>

	enar$s
1$:	spnd$s
	br	1$

	.sbttl	AST Routines

watchd::tst	(sp)+
	mov	#clinum,r0
	mov	#client,r1
1$:	tst	cl.rid(r1)
	beq	10$
	inc	cl.age(r1)
	cmp	#maxage,cl.age(r1)
	bgt	10$
	qiow$s	#io.cln,cl.lun(r1),#conefn
	call	mapcli
	mov	wdb+w.nbas,r2
	clr	ht.rid(r2)
	cmp	#maxage,cl.age(r1)
	beq	10$
	tst	ht.dir(r2)
	bne	9$
	call	relcli
9$:
10$:
	add	#cl.siz,r1
	sob	r0,1$
	mrkt$s	,timer,#1,#watchd
	ordie	<Cannot re-setup watchdog timer>
	astx$s

conrdy::tst	(sp)+
	qiow$s	#io.ast,#tclun,#tcefn
	call	getcli
	tst	r1
	bne	1$
	qiow$s	#io.rej,#tclun,#tcefn
	br	2$
1$:	qiow$s	#io.cep,cl.lun(r1),#conefn,,#iosb,,<#port>
	orclos	,iosb
	qiow$s	#io.acc,cl.lun(r1),#conefn,,#iosb,,<0,#sopt,#tmout>
	orclos	,iosb
	mov	r1,r2
	add	#cl.sta,r2
	mov	r1,r3
	add	#cl.req,r3
	qio$s	#io.rlb,cl.lun(r1),#conefn,,r2,#reqrdy,<r3,#cl.rsz>
	orclos
2$:	astx$s

reqrdy::mov	(sp)+,r1
	mov	r1,r2
	sub	#cl.sta,r1
	orclos	r1,r2
	mov	2(r2),r2	; Number of bytes read => R2.
	mov	r1,r3
	add	#cl.req,r1
	add	r1,r2		;  End of request => R2.
	clrb	@r2
	mov	#reqget,r0
	mov	#' ,r2
	call	tokcmp
	bcs	1$
	cmpb	#'/,(r1)+
	beq	2$
1$:	mov	r3,r1
	jmp	rsp400
2$:	mov	r1,r0
	call	fndhnd
	bcc	3$
	mov	r3,r1
	jmp	rsp404
3$:	mov	r1,r2
	mov	r3,r1
	call	mapcli
	ctxini	wdb+w.nbas,r1,r2,cl.rid(r1)
temp::	sref$s	r0,#wdb,#1
	or503
	astx$s

rsprdy::rcvd$s	,#rspbuf
	bcc	1$
	cmp	#ie.its,$dsw
	bne	2$	
	astx$s
2$:	jmp	rcverr	
1$:	mov	rspbuf+4,r1
	call	mapcli
	mov	r1,r4
	add	#cl.sta,r4
	ctxuse	wdb+w.nbas
	qio$s	#io.wlb,cl.lun(r1),#conefn,,r4,#rspast,<#hdr200,#hdl200>
	orclos
	mov	r1,r3
	ctx2st
	mov	#tmpbuf,r0
	clr	r2
	call	$cbdmg
	sub	#tmpbuf,r0
	qio$s	#io.wlb,cl.lun(r3),#conefn,,r4,#rspast,<#tmpbuf,r0>
	orclos	r3	
	qio$s	#io.wlb,cl.lun(r3),#conefn,,r4,#rspast,<#hdrend,#hdlend>
	orclos	r3	
	ctx2st
	qio$s	#io.wlb,cl.lun(r3),#conefn,,r4,#rspdon,<r0,r1>
	orclos	r3	
	jmp	rsprdy

rspdon::mov	(sp)+,r1
	mov	r1,r2
	sub	#cl.sta,r1
	orclos	r1,r2
	jmp	close
rcverr:	die	<Cannot receive data>

close::	qiow$s	#io.cln,cl.lun(r1),#conefn
	call	relcli
	astx$s

rspast::mov	(sp)+,r1
	mov	r1,r2
	sub	#cl.sta,r1
	orclos	r1,r2
	astx$s

	.sbttl	Utilities

;+
; Find handler for URL.
; R1 points at URL.
; Handler table is at HNDTBL.
; Its last entry is at HNDEND.
; Handler task name is returned in R0.
; Carry bit is cleared on success.
;-
fndhnd::save02
	clr	r1
	call	$cat5
	bcc	4$
	cmpb	#' ,r2
	bne	3$
4$:	mov	#hndtbl,r0
1$:	cmp	(r0)+,r1
	beq	2$
	cmp	r0,#hndend
	bge	3$
	cmp	(r0)+,(r0)+
	br	1$
2$:	mov	r0,s0(sp)
	clc
	return
3$:	sec
	return

	.sbttl	Client Descriptor Utilities

;+
; Initialize client descriptors.
; Client descriptor area is at CLIENT.
; CLINUM is a number of descriptors to initialize.
; BLUN is the lowest unused LUN.
; Region definitions are at CLIRDB.
; Descriptors are a linked list, TOPCLI points at its head.
;-
inicli::save05
	mov	#clinum,r1
	mov	#client,r0
	mov	#blun,r2
	mov	#clirdb,r3
1$:	mov	r2,cl.lun(r0)
	alun$s	r2,#"TC
	bcs	lunerr
	clr	cl.rid(r0)
	clr	cl.age(r0)
	mov	r3,cl.reg(r0)
	mov	topcli,cl.nxt(r0)
	mov	r0,topcli
	mov	#rdbsiz,r5
	mov	#rdb,r4
2$:	movb	(r4)+,(r3)+
	sob	r5,2$
	add	#cl.siz,r0
	inc	r2
	sob	r1,1$
	mov	#clirdb,r0
	mov	#clinum,r1
3$:	crrg$s	r0
	bcs	regerr
	add	#rdbsiz,r0
	sob	r1,3$
	return
regerr:	die	<Cannot create region>
lunerr:	die	<Cannot assign LUN>

;+
; Pop a client descriptor from the pool.
; Return the descriptor in R1.
; R1 = 0 if pool is empty.
;-
getcli::mov	topcli,r1
	beq	1$
	add	#1,reqid	; Set Carry on overflow!	
	adc	reqid
	mov	reqid,cl.rid(r1)
	mov	cl.nxt(r1),topcli
1$:	return

;+
; Push a client descriptor to the pool.
; Descriptor is in R1.
;-
relcli::mov	topcli,cl.nxt(r1)
	mov	r1,topcli
	clr	cl.rid(r1)
	clr	cl.age(r1)
	return

;+
; Map address window to the client's region.
; Client descriptor is in R1.
;-
mapcli::save02
	mov	r1,r2
	add	#cl.reg,r2
	mov	@r2,r2
	mov	r.gid(r2),wdb+w.nrid
	map$s	#wdb
	orclos
	return

	.end	start
